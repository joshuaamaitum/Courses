library(curl)
library(BasketballAnalyzeR)
library(ggplot2)
library(htmltab)
library(stringr)
library(dplyr)
library(gridExtra)
library(cowplot)
library(htmltab)
# For the below 2 commands, if prompted, type "no" and Enter
#install.packages("colorspace")
#install.packages("curl")
#install.packages("BasketballAnalyzeR")
#install.packages("ggplot2")
#install.packages("htmltab")
#install.packages("stringr")
#install.packages("dplyr")
#install.packages("gridExtra")
#install.packages("cowplot")
install.packages("rvest")
install.packages("rvest")
library(rvest)
#read first table and add the date and teams
statA <- htmltab(doc = url, which = 4, rm_nodata_cols = F)
statA <- cbind(date, Team=teamA, Opponent=teamB, statA)
#read first table and add the date and teams
statA <- rvest(doc = url, which = 4, rm_nodata_cols = F)
statA <- cbind(date, Team=teamA, Opponent=teamB, statA)
library(curl)
library(BasketballAnalyzeR)
library(ggplot2)
library(htmltab)
library(stringr)
library(dplyr)
library(gridExtra)
library(cowplot)
library(rvest)
# Group A
url1 <- "https://fbref.com/en/matches/caa84313/Italy-Switzerland-June-16-2021-UEFA-Euro"
library(rvest)
# Group A
url1 <- "https://fbref.com/en/matches/caa84313/Italy-Switzerland-June-16-2021-UEFA-Euro"
url2 <- "https://fbref.com/en/matches/95a9ebd1/Turkey-Italy-June-11-2021-UEFA-Euro"
url3 <- "https://fbref.com/en/matches/f09b64db/Turkey-Wales-June-16-2021-UEFA-Euro"
url4 <- "https://fbref.com/en/matches/d9eaa85c/Wales-Switzerland-June-12-2021-UEFA-Euro"
url5 <- "https://fbref.com/en/matches/b756c626/Italy-Wales-June-20-2021-UEFA-Euro"
url6 <- "https://fbref.com/en/matches/fa85a731/Switzerland-Turkey-June-20-2021-UEFA-Euro"
url_group_A <- rbind(url1, url2, url3, url4, url5, url6)
# Group B
url7 <- "https://fbref.com/en/matches/e594174b/Belgium-Russia-June-12-2021-UEFA-Euro"
url8 <- "https://fbref.com/en/matches/25bb1fa2/Denmark-Belgium-June-17-2021-UEFA-Euro"
url9 <- "https://fbref.com/en/matches/2c48acb2/Finland-Russia-June-16-2021-UEFA-Euro"
url10 <- "https://fbref.com/en/matches/c3c2ffa2/Denmark-Finland-June-12-2021-UEFA-Euro"
url11 <- "https://fbref.com/en/matches/bd35edec/Finland-Belgium-June-21-2021-UEFA-Euro"
url12 <- "https://fbref.com/en/matches/04188c5c/Russia-Denmark-June-21-2021-UEFA-Euro"
url_group_B <- rbind(url7, url8, url9, url10, url11, url12)
# Group C
url13 <- "https://fbref.com/en/matches/f3d39a29/Netherlands-Austria-June-17-2021-UEFA-Euro"
url14 <- "https://fbref.com/en/matches/b47a0ea6/Austria-North-Macedonia-June-13-2021-UEFA-Euro"
url15 <- "https://fbref.com/en/matches/e0eed6e8/Ukraine-North-Macedonia-June-17-2021-UEFA-Euro"
url16 <- "https://fbref.com/en/matches/0e9919a5/Netherlands-Ukraine-June-13-2021-UEFA-Euro"
url17 <- "https://fbref.com/en/matches/841065f5/North-Macedonia-Netherlands-June-21-2021-UEFA-Euro"
url18 <- "https://fbref.com/en/matches/7ed46abd/Ukraine-Austria-June-21-2021-UEFA-Euro"
url_group_C <- rbind(url13, url14, url15, url16, url17, url18)
# Group D
url19 <- "https://fbref.com/en/matches/6599f4ab/Scotland-Czech-Republic-June-14-2021-UEFA-Euro"
url20 <- "https://fbref.com/en/matches/1e930db9/Croatia-Czech-Republic-June-18-2021-UEFA-Euro"
url21 <- "https://fbref.com/en/matches/764c27dc/England-Croatia-June-13-2021-UEFA-Euro"
url22 <- "https://fbref.com/en/matches/027b11df/England-Scotland-June-18-2021-UEFA-Euro"
url23 <- "https://fbref.com/en/matches/20b1972b/Czech-Republic-England-June-22-2021-UEFA-Euro"
url24 <- "https://fbref.com/en/matches/0305e42c/Croatia-Scotland-June-22-2021-UEFA-Euro"
url_group_D <- rbind(url19, url20, url21, url22, url23, url24)
# Group E
url25 <- "https://fbref.com/en/matches/107fd412/Spain-Sweden-June-14-2021-UEFA-Euro"
url26 <- "https://fbref.com/en/matches/d35ad7a8/Poland-Slovakia-June-14-2021-UEFA-Euro"
url27 <- "https://fbref.com/en/matches/c6533f76/Sweden-Slovakia-June-18-2021-UEFA-Euro"
url28 <- "https://fbref.com/en/matches/14874531/Spain-Poland-June-19-2021-UEFA-Euro"
url29 <- "https://fbref.com/en/matches/ee6087f4/Sweden-Poland-June-23-2021-UEFA-Euro"
url30 <- "https://fbref.com/en/matches/7b46b857/Slovakia-Spain-June-23-2021-UEFA-Euro"
url_group_E <- rbind(url25, url26, url27, url28, url29, url30)
# Group F
url31 <- "https://fbref.com/en/matches/95d34c87/France-Germany-June-15-2021-UEFA-Euro"
url32 <- "https://fbref.com/en/matches/ba500d70/Hungary-Portugal-June-15-2021-UEFA-Euro"
url33 <- "https://fbref.com/en/matches/988198ba/Hungary-France-June-19-2021-UEFA-Euro"
url34 <- "https://fbref.com/en/matches/e33c4403/Portugal-Germany-June-19-2021-UEFA-Euro"
url35 <- "https://fbref.com/en/matches/5a7e53d8/Portugal-France-June-23-2021-UEFA-Euro"
url36 <- "https://fbref.com/en/matches/a4888546/Germany-Hungary-June-23-2021-UEFA-Euro"
url_group_F <- rbind(url31, url32, url33, url34, url35, url36)
# Choose a game from the list of URLs from the previous step
selected_game <- url35
# Some data manipulation to get the date and teams from the URLs
game_data <- substr(selected_game, 39, nchar(selected_game)-10)
date <- substr(game_data, nchar(game_data)-11, nchar(game_data))
teams <- substr(game_data, 1, nchar(game_data)-13)
teams <- str_replace(teams, "Czech-Republic", "Czech Republic")
teams <- str_replace(teams, "North-Macedonia", "North Macedonia")
teamA <- sub("-.*", "", teams)
teamB <- sub(".*-", "", teams)
#define the node
node <- "#stats_b561dd30_defense"
#add the node to the URL
url <- paste0(selected_game, node)
#read first table and add the date and teams
statA <- rvest(doc = url, which = 4, rm_nodata_cols = F)
statA <- cbind(date, Team=teamA, Opponent=teamB, statA)
#read first table and add the date and teams
statA <- read_html(doc = url, which = 4, rm_nodata_cols = F)
statA <- cbind(date, Team=teamA, Opponent=teamB, statA)
#read first table and add the date and teams
statA <- html_table(doc = url, which = 4, rm_nodata_cols = F)
statA <- cbind(date, Team=teamA, Opponent=teamB, statA)
#read first table and add the date and teams
statA <- htmltab(doc = url, which = 4, rm_nodata_cols = F)
statA <- cbind(date, Team=teamA, Opponent=teamB, statA)
#read second table and add the date and teams
statB <- htmltab(doc = url, which = 11, rm_nodata_cols = F)
statB <- cbind(date, Team=teamB, Opponent=teamA, statB)
#combine the two table rows
stat_both <- rbind(statA, statB)
stat_both$Player <- str_trim(stat_both$Player, side = c("both", "left", "right"))
View(stat_both)
#read first table and add the date and teams
statA <- htmltab(doc = url, which = 4, rm_nodata_cols = F)
#read first table and add the date and teams
statA <- htmltab(doc = url, which = 4, rm_nodata_cols = F)
rm(list = ls()) #clear R memory
#Load packages
library(worldfootballR)
library(devtools)
rm(list = ls()) #Clean R's memory
# Load the required libraries
library(keras)
library(tensorflow)
# Set seed for reproducibility (Allow to reproduce exact results for debugging, testing, or sharing work)
set.seed(123)
# Define data generators (Augment the data to help the model generalise better by exposing it to slightly modified versions of original images)
train_datagen <- image_data_generator(
rescale = 1/255, # Normalising pixel values to floating points between 0 and 1
shear_range = 0.2, # Maximum shear angle for tranformations by data generator
zoom_range = 0.2, # Data generator may apply zoom transformations with a maximum zoom of 20%
horizontal_flip = TRUE # Flip images randomly to horizontal during training, helps improve model robustness
)
install.packages("reticulate")
install.packages("reticulate")
reticulate::virtualenv_create('r-reticulate')
install.packages("reticulate")
reticulate::virtualenv_create('r-reticulate')
reticulate::virtualenv_create('r-reticulate')
reticulate::install_python(version = '<version>')
reticulate::virtualenv_create('r-reticulate')
reticulate::virtualenv_activate('r-reticulate')
reticulate::py_install(c("tensorflow", "keras"))
reticulate::install_python(version = '<version>')
virtualenv_create("r-reticulate")
library(reticulate)
virtualenv_create("r-reticulate")
rm(list = ls()) #Clean R's memory
# Load the required libraries
library(keras)
library(tensorflow)
# Set seed for reproducibility (Allow to reproduce exact results for debugging, testing, or sharing work)
set.seed(123)
# Define data generators (Augment the data to help the model generalise better by exposing it to slightly modified versions of original images)
train_datagen <- image_data_generator(
rescale = 1/255, # Normalising pixel values to floating points between 0 and 1
shear_range = 0.2, # Maximum shear angle for tranformations by data generator
zoom_range = 0.2, # Data generator may apply zoom transformations with a maximum zoom of 20%
horizontal_flip = TRUE # Flip images randomly to horizontal during training, helps improve model robustness
)
install_tensorflow()
# Reading the first data set and the titles
Data = read.csv2("FRA_data1.csv",row.names=1)
Titles = read.csv2("FRA_titles.csv",row.names=1)
setwd("D:/AGROPARISTECH/R_TUTORIAL/Tutorial_R")
# Reading the first data set and the titles
Data = read.csv2("FRA_data1.csv",row.names=1)
Titles = read.csv2("FRA_titles.csv",row.names=1)
# Boxplots
boxplot(Data[,2:3], ylab="Areas (1000 ha)", names=c("Land area" ,"Forest area"), main="Land and forest areas")
boxplot(Data[,5:6], ylab="log(Areas (1000 ha) + 1)",names=c("Land area" ,"Forest area"),main="Land and forest areas") mtext("(log10(1000 ha +1))",line=0.3, cex=0.9) # Back to a unique window
source("D:/AGROPARISTECH/R_TUTORIAL/Tutorial_R/R_FRA_script.R", echo=TRUE)
# Reading the first data set and the titles
Data = read.csv2("FRA_data1.csv",row.names=1)
Titles = read.csv2("FRA_titles.csv",row.names=1)
str(Data)
# Row names of the table
rownames(Data)
# First rows of the table
head(Data)
# Question 3
head(Titles)
# Questions 4 and 5
# Identifying the variables types
sapply(Data, class)
# Tracking the factor variables
sapply(Data,is.factor)
# Positions of the factor variables in the data frame
Vf = which(sapply(Data,is.factor))
Vf
# Positions of the numeric variables in the data frame
Vn = which(sapply(Data,is.numeric))
Vn
# Question 6
# Reminder of the 6 first rows of Data
head(Data)
# Selection of 1 line by its row number
Data[3,]
# Selection of a list of lines, with row numbers (example : 1 to 3, and 6)
Data[c(1:3,6),]
# Selection of one specific column (example for column number 1)
Data[,1]
# Selection of rows and columns
Data[1:5,1:2]
# Selection by removing 1 variable
Data[1:5,-2]
# Selection by removing several variables
Data[1:5,-c(2,3)]
# Selection by removing rows (numbers 1, 3 and 6 to 230)
Data[-c(1,3,6:230),]
# Selection by removing all rows from the 4th to the last
Data[-(4:nrow(Data)),]
# Question 7
# Selection of specific rows (example : 1 to 3, and 6)
Data[c(71, 82, 127, 130, 169),]
# Selection with a row name
Data["Algeria",]
# Same selection with an abbreviation of the row name
Data["Alg",]
# Warning : the abbreviation should be fitted to only 1 row name Data["Al",] # Tentative selection of Albania and Algeria
# Selection of a list of rows
Data[c("Af","Alb","Alg","Ango"),]
# Selection of a variable
Data[,"Continent"]
# Warning : abbreviations cannot be used for variables
#Data[,"Contin"] # Tentative selection of a variable with an abbreviation # Same selection with the $
Data$Continent
# Selection of a data frame subset with at least 2 columns --> data frame Selec = Data[1:3, c("LA","FA")]
Selec = Data[1:3, c("LA","FA")]
class(Selec)
# Selection of a data frame subset with only 1 column --> vector
Selec = Data[1:3, "LA"]
Selec
class(Selec)
# Question 8
Data[c("French Guiana","France"),]
# How to find easily information on the Data variables in Titles
names(Data)
Titles[names(Data),]
Titles["FA",c(1,3)]
# Select all data from a continent
Data[Data$Continent=="Asia",]
Data[Data[,1]=="Asia",]
# Select all territories having a territory larger than a threshold
Data[Data$LA >= 500000,]
# Question 9
# Select the data of a list of territories
Data[rownames(Data) %in% c("France","French Guiana"),]
# Select data for French Guiana and France
Data[rownames(Data) %in% c("Australia","Brazil","Canada","China","Russian Federation","USA"),]
Area<-data.frame(Data[c("Australia","Brazil","Canada","China","Russian Federation","USA"),])
#Try and order by FA
df <- Area[order(Area$FA), ]
print(df)
# Question 10: Among the largest countries of the american continent, which one has the largest forest area ?
Area1 <- Data[rownames(Data) %in% c("Brazil","Canada","USA"),]
df1 <- Area1[order(Area1$FA), ]
print(df1)
# Table content
summary(Data)
# Reminder of the factor variables in Data
Vf
# Question 11: Which continent has the largest number of territories ?
# Frequency of the factor values
table(Data$Continent)
# Reminder of the factor variables in Data
Vn
Datanum = Data[,Vn]
head(Datanum)
# Examples of statistics
apply(Datanum,2,min)
apply(Datanum,2,quantile)
# Remove the missing values (na.rm = TRUE)
apply(Datanum,2,min, na.rm = TRUE)
apply(Datanum,2,quantile, na.rm = T)
apply(Datanum,2,mean, na.rm = T)
apply(Datanum,2,sd, na.rm = T)
# Creation of a data frame with TRUE in place of the NAs and FALSE everywhere else
MV = is.na(Data)
head(MV)
# Total number of missing values
sum(MV)
# Number of missing values / variables
MVv = apply(MV,2,sum)
MVv
# Number of missing values / rows
MVr = apply(MV,1,sum)
MVr
# Frequency of the number of missing values per row table(MVr)
# Rows with missing values
Data[MVr>0,]
# Question 13
# Table without rows containing missing values
Dataw = Data[MVr == 0,]
dim(Dataw) ; dim(Data)
Dataw = na.omit(Data)
dim(Dataw) ; dim(Data)
# Substitution of all NAs by 0 (only if there are relevant reasons to do it)
Data[MV]=0
# In fact, the values are equal to 0 in the original data base # Checking the absence of NAs, without removing rows
summary(Data)
dim(Dataw) ; dim(Data)
#4.6.1 - Creating variables
# Creation of a variable “FCR” (Forest Cover Rate”)
Data$FCR = ((Data$FA / Data$LA)*100)
summary(Data)
# Transformation of LA and FA by the decimal logarithm
Data$LAlog = log10(Data$LA)
Data$FAlog = log10(Data$FA)
summary(Data)
# Transformed variables avoiding the infinite values (log(0)→-inf) Data$LAlog = log10(Data$LA+1)
Data$FAlog = log10(Data$FA+1)
summary(Data)
# Selection of 2 variables of the data frame (continent ant forest cover rate), and ordering the data rows by increasing forest cover rate
Data[order(Data$FCR) , c("Continent","FCR")]
# Here we order the rows by decreasing forest cover rate
# and then we select the 10 first rows
Data[order(Data$FCR, decreasing=T),c("Continent","FCR","FA")][1:10,]
#4.7 – Statistics calculated for subsets of data
# Land and forest covers per continents
Continents = aggregate(Data[,2:3], list(Data$Continent), sum, na.rm=T)
Continents
# Transfer the names of the continents in the row names
rownames(Continents) = Continents[,1]
Continents
# Removal of the first column
Continents = Continents[,-1]
Continents
# Calculation of a forest cover rate / continent
Continents$FCR = Continents$FA / Continents$LA
# Ordering the rows by decreasing forest area
Continents = Continents[order(Continents$FA, decreasing=T),]
Continents
#4.8.1 - Comparing values of small data sets
# Pie chart of the forest area per continent
pie(Continents$FA, main="Forest area / continent", labels=rownames(Continents))
# Bar chart of the forest area per continent
barplot(Continents$FA, main="Forest area / continent", names=rownames(Continents))
# Barplot of the forest cover rate with bar's width proportional to land area # --> bars area proportional to forest area
barplot(Continents$FCR, width = Continents$LA,
names=rownames(Continents), las=2, main = "Forest cover rate / continent", ylab="Forest cover rate")
mtext("(forest areas proportional to bar areas)",line=0.3)
# Addition of the mean forest cover rate (world scale)
FCRw = sum(Continents$FA)/sum(Continents$LA)
abline(h= FCRw, col="red", lty=2)
mtext(paste("Global FC rate :",round(FCRw*100,1),"%"),line=-4, col="red")
#Question 17: "Which territory displays the highest forest cover rate ? (French Guiana, Guyana, Suriname, Gabon, Laos, Micronesia)
countries = Data[c("French Guiana","Guyana","Suriname","Gabon","Laos","Micronesia"),]
rate=countries[order(countries$FCR, decreasing=T),]
rate
rate1=Continents[order(Continents$FCR, decreasing=T),]
rate1
# Example of small data set : number of territories per continent
table(Data$Continent)
# Pie chart
pie(table(Data$Continent), main="Number of territories")
# Bar chart
barplot(table(Data$Continent), main="Number of territories")
# Choice of colours for the continents
rownames(Continents)
Colcont = c("red","orange","green","blue","magenta")
# Application to the pie chart
pie(table(Data$Continent), col=Colcont, main="Number of territories")
# Application to the bar chart
barplot(table(Data$Continent), col=Colcont, main="Number of territories")
#4.8.3 - Distributions of large data sets
# Histograms
hist(Data$LA, main="Histogram of the land areas", xlab="Land area (1000 ha)")
hist(Data$FA, main="Histogram of the forest areas", xlab="Forest area (1000 ha)")
hist(Data$FCR, main="Histogram of the forest cover rates", xlab="Forest cover rate")
hist(Data$LAlog, main="Histogram of the land areas (log10 scale)",xlab="log10(Land area (1000 ha)+1)")
# Controlling the number of intervals with "breaks"
hist(Data$LAlog, main="Histogram of the land areas (log10 scale)", xlab="log10(Land area (1000 ha)+1)", breaks=6)
hist(Data$FAlog, main="Histogram of the forest areas (log10 scale)", xlab="log10(Forest area (1000 ha)+1)", breaks=6)
# Question 18: How many territories have a forest area comprised between 100 000 and 1000 000 ha ?
territories<-Data[Data$FA >= 100 & Data$FA <= 1000,]
territories
nrow(territories)
boxplot(Data[,2:3], ylab="Areas (1000 ha)", names=c("Land area" ,"Forest area"), main="Distribution of the land and forest areas")
# Boxplots of forest areas (original scales)
boxplot(Data[,4], ylab="Forest cover rate", main="Distribution of the forest cover rate")
# Boxplots of forest areas (log scales)
boxplot(Data[,5:6], ylab="log(Areas (1000 ha) + 1)",
names=c("Land area" ,"Forest area"),
main="Distribution of the land and forest areas")
mtext("(decimal log scale)",line=0.3)
#4.8.4 – Displaying several graphs on a divided window
# Drawing 5 histograms in a same figure
# Sharing the window into 2x3 small windows par(mfrow=c(2,3))
# Reduction of the margins
par(mar=c(2,2.5,2.5,0.5))
# Histograms
hist(Data$LA, main="Land areas")
mtext("(1000 ha)", cex=0.7, line=-0.5)
hist(Data$FA, main="Forest areas")
mtext("(1000 ha)", cex=0.7, line=-0.5)
hist(Data$FCR, main="Forest cover rates") hist(Data$LAlog, main="log10(Land area +1)" ,breaks=6,
mtext("(1000 ha)", cex=0.7, line=-0.5)
hist(Data$FAlog, main="log10(Forest area +1)" ,breaks=6,
xlab="log10(Forest area (1000 ha)+1)") mtext("(1000 ha)", cex=0.7, line=-0.5)
# Drawing 3 graphs with boxplots on the same figure
# Sharing the window into 2x2 small windows
par(mfrow=c(2,2))
# Reduction of the margins
par(mar=c(2,4,4,0.5))
# Boxplots
boxplot(Data[,2:3], ylab="Areas (1000 ha)", names=c("Land area" ,"Forest area"), main="Land and forest areas")
mtext("(1000 ha)",line=0.3, cex=0.9) boxplot(Data[,4], ylab="Forest cover rate", main="Forest cover rate")
boxplot(Data[,5:6], ylab="log(Areas (1000 ha) + 1)",names=c("Land area" ,"Forest area"),main="Land and forest areas") mtext("(log10(1000 ha +1))",line=0.3, cex=0.9) # Back to a unique window
par(mfrow=c(1,1))
Data2 = read.csv2("FRA_data2.csv",row.names=1)
Data2 = read.csv2("FRA_data2.csv",row.names=1)
View(Data2)
View(Data2)
View(Titles)
View(Titles)
rm(list = ls()) #Clean R's memory
rm(list = ls())
rm(list = ls()) #Clean R's memory
# Setting the working directory
setwd("G:/My Drive/GitHub Desktop/Courses/Tutorial_R") # Update working directory
# Reading the first data set and the titles
Data = read.csv2("FRA_data1.csv",row.names=1)
Titles = read.csv2("FRA_titles.csv",row.names=1)
rm(list = ls()) #Clean R's memory
# Setting the working directory
setwd("G:/My Drive/GitHub Desktop/Courses/Tutorial_R") # Update working directory
# Reading the first data set and the titles
data = read.csv2("FRA_data1.csv",row.names=1)
titles = read.csv2("FRA_titles.csv",row.names=1)
str(data)
View(data)
nrow(data)
ncol(data)
ncol(data)
dim(data)
names(data)
rownames(data)
head(data)
tail(data)
tail(data) # Last 6 rows
sapply(data, is.factor)
sapply(names, is.factor)
str(data)
str(data) # Strucutre of the object
nrow(data) # No. of rows
ncol(data) # No. of columns
dim(data) # No. of rows & columns
names(data) # Names of columns
rownames(data) # Names of rows
head(data) # First 6 rows
tail(data) # Last 6 rows
View(data)
class(data)
sapply(data, fun)
class(data)
sapply(data, is.factor)
is.factor(data)
is.numeric(data) # Checks if variable is numeric
which(data)
rm(list = ls()) #Clean R's memory
# Setting the working directory
setwd("G:/My Drive/GitHub Desktop/Courses/Tutorial_R") # Update working directory
# Reading the first data set and the titles
data = read.csv2("FRA_data1.csv",row.names=1)
titles = read.csv2("FRA_titles.csv",row.names=1)
str(data) # Structure of the object
nrow(data) # No. of rows
ncol(data) # No. of columns
dim(data) # No. of rows & columns
names(data) # Names of columns
rownames(data) # Names of rows
head(data) # First 6 rows
tail(data) # Last 6 rows
class(data) # Type of object
#sapply(data, is.factor) # Function applied
is.factor(data) # Checks if variable is a factor
is.numeric(data) # Checks if variable is numeric
which(data) # Returns list of elements having a true value
sapply(data, class)
sapply(data, is.factor) # Function applied
Vn = which(sapply(data, is.numeric))
Vn
View(titles)
class(titles)
names(titles)
head(titles)
head(titles)
names(data)
head(data)
data[3,]
data[c(1:3,6),] # Extract several specific rows
data[,1] # Extract a single column, e.g. 1
data[1:5,1:2] # Select ranges of specific rows & columns
data[c(10:15,30:35),1:2]
data[10:20,-3]
data[50:60,-c(2,3)]
data[50:60,c(2,3)] # Selection by removing several rows
data[50:60,-c(2,3)] # Selection by removing several rows
data[-c(1:3,6:230),]
data[-(4:nrow(data)),]
data[-(11:nrow(data)),]
data[c(71,82,127,130,169),]
